% Created by Kuan-Min Lee
% Created date: Dec. 13th, 2024
% All rights reserved to Leelab.ai

% Brief User Introducttion:
% The following codes are constructed to compute ROC curve for the trained
% neural network

% Inputs Parameters:
% yTrue  - binary vector of true labels for prediction label (0 for none or 1 for true).
% scores - prediction vector generated by neural network
% class - "HR", "LR", or "MCI"

% Output Parameters:
% FPR - False Positive Rates at different thresholds.
% TPR - True Positive Rates at different thresholds.
% AUC - Area Under the Curve for the ROC curve.


function [FPR, TPR, AUC] = compute_ROC(test_gt_data,out_storage, fold_num, class)

    %% check class types
    if strcmp(class,'HR')
        class_ind=1;
    elseif strcmp(class,'LR')
        class_ind=2;
    elseif strcmp(class,'MCI')
        class_ind=3;
    else
        error('Unfound class type. Please double check.');
    end
    
    %% create binary output for groundtruth and predictive data
    % create binary dataset and ROC
    % HR case
    % generate HR binary groundtruth
    % grab out HR and non-HR case
    True_ind=test_gt_data(class_ind,:,:)==1;
    yTrue=zeros(1,size(test_gt_data,2),size(test_gt_data,3));
    yTrue(1,True_ind)=1;
    % generate HR scores
    scores=out_storage(class_ind,:,fold_num);
    
    % Ensure inputs are column vectors
    yTrue = yTrue(:);
    scores = scores(:);
    
    % Sort scores in descending order and get sorted indices
    [~, idx] = sort(scores, 'descend');
    yTrueSorted = yTrue(idx);
    
    % Initialize TPR and FPR arrays
    P = sum(yTrue);  % Total positives
    N = sum(~yTrue); % Total negatives
    TPR = zeros(length(scores) + 1, 1);
    FPR = zeros(length(scores) + 1, 1);
    
    TP = 0; % True positives count
    FP = 0; % False positives count
    
    % Compute TPR and FPR for each threshold
    for i = 1:length(scores)
        if yTrueSorted(i) == 1
            TP = TP + 1;
        else
            FP = FP + 1;
        end
        TPR(i + 1) = TP / P;
        FPR(i + 1) = FP / N;
    end
    
    % Calculate AUC using the trapezoidal rule
    AUC = trapz(FPR, TPR);
    
    fprintf('AUC = %.4f\n', AUC);

    % Plot ROC curve
    figure;
    plot(FPR, TPR, '-b', 'LineWidth', 2);
    hold on;
    plot([0, 1], [0, 1], '--k');
    grid on;
    xlabel('False Positive Rate (FPR)');
    ylabel('True Positive Rate (TPR)');
    img_title=strcat('Receiver Operating Characteristic (ROC) Curve, Fold: ', string(fold_num), ', class: ', class, ' AUC: ',string(AUC));
    title(img_title);
    legend('ROC Curve', 'Random Guess', 'Location', 'SouthEast');
    hold off;

    if ~exist("Phase_3_Prediction_model/models/testing_plot","dir")
        mkdir("Phase_3_Prediction_model/models/testing_plot")
    end
    file_name=strcat('Phase_3_Prediction_model/models/testing_plot/test_original_network_mean_removal_pca_ROC_unfold',class,'_',string(fold_num),'.png');
    saveas(gcf, file_name);  % Save as a PNG image

    
end
